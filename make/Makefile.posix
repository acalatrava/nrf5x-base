################################################################################
## Linux flavored Makefile for getting code onto the nRF
################################################################################


# Set toolchain path if arm-none-eabi- binaries are not in user path
# TOOLCHAIN_PATH ?=
TERMINAL ?= gnome-terminal -e

FLASH_START_ADDRESS = $(shell $(OBJDUMP) -h $(ELF) -j .text | grep .text | awk '{print $$4}')

ifdef SEGGER_SERIAL
JLINKEXE_OPTION = -SelectEmuBySn $(SEGGER_SERIAL)
JLINKGDBSERVER_OPTION = -select USB=$(SEGGER_SERIAL)
JLINKRTTCLIENT_OPTION = -select USB=$(SEGGER_SERIAL)
endif

MAKE_BUILD_FOLDER = mkdir -p $(OUTPUT_PATH)

JLINK = -JLinkExe $(JLINK_OPTIONS) $(JLINKEXE_OPTION)
JLINKGDBSERVER = JLinkGDBServer $(JLINK_OPTIONS) $(JLINKGDBSERVER_OPTION)
JLINKRTTCLIENT = JLinkRTTClient $(JLINK_OPTIONS) $(JLINKRTTCLIENT_OPTION)

SOFTDEVICE_OUTPUT = $(OUTPUT_PATH)$(notdir $(SOFTDEVICE))

clean:
	rm -rf $(OUTPUT_PATH)
	rm -f *.jlink
	rm -f JLink.log
	rm -f .gdbinit

flash: all flash.jlink test-softdevice
	$(JLINK) $(OUTPUT_PATH)flash.jlink

ifdef ID
# Write the ID to flash as well
ID_BYTES = $(subst :, ,$(ID))
NUM_ID_BYTES = $(words $(ID_BYTES))
ifneq ($(NUM_ID_BYTES),6)
$(error "Invalid number of bytes in ID string (expecting 6)")
endif
ID_FIRST = $(word 1,$(ID_BYTES))$(word 2,$(ID_BYTES))
ID_SECON = $(word 3,$(ID_BYTES))$(word 4,$(ID_BYTES))$(word 5,$(ID_BYTES))$(word 6,$(ID_BYTES))
endif

flash.jlink:
	$(MAKE_BUILD_FOLDER)
	printf "r\n" > $(OUTPUT_PATH)flash.jlink
ifdef ID
	printf "w4 $(ID_FLASH_LOCATION), 0x$(ID_SECON) 0x$(ID_FIRST)\n" >> $(OUTPUT_PATH)flash.jlink
endif
	printf "loadfile $(HEX) \nr\ng\nexit\n" >> $(OUTPUT_PATH)flash.jlink


test-softdevice: test-softdevice.jlink
ifndef SOFTDEVICE
	$(error "You need to set the SOFTDEVICE command-line parameter to a path (without spaces) to the softdevice hex-file")
endif

ifneq ($(SOFTDEVICE_MODEL),blank)
	$(MAKE_BUILD_FOLDER)
	@touch $(SOFTDEVICE_TEST_FLASH)
	@$(OBJCOPY) -Iihex -Obinary $(SOFTDEVICE) $(SOFTDEVICE_OUTPUT:.hex=.bin)
	@$(JLINK) $(OUTPUT_PATH)test-softdevice.jlink
	@dd skip=$(shell printf "%d" $(SOFTDEVICE_TEST_ADDR)) count=$(shell printf "%d" $(SOFTDEVICE_TEST_LEN)) if=$(SOFTDEVICE_OUTPUT:.hex=.bin) of=$(SOFTDEVICE_TEST_BIN) bs=1
	@diff -q $(SOFTDEVICE_TEST_FLASH) $(SOFTDEVICE_TEST_BIN) || $(MAKE) flash-softdevice
endif

# address and length determined experimentally. Works for s110_7, s110_8, s120_2, and s130_1
SOFTDEVICE_TEST_ADDR = 0x1000
SOFTDEVICE_TEST_LEN = 0x10
SOFTDEVICE_TEST_BIN = $(OUTPUT_PATH)softdevice_test.bin
SOFTDEVICE_TEST_FLASH = $(OUTPUT_PATH)downloaded_test.bin
test-softdevice.jlink:
	$(MAKE_BUILD_FOLDER)
	printf "r\nsavebin $(SOFTDEVICE_TEST_FLASH) $(SOFTDEVICE_TEST_ADDR) $(SOFTDEVICE_TEST_LEN)\nexit\n" > $(OUTPUT_PATH)test-softdevice.jlink

flash-softdevice: erase-all flash-softdevice.jlink
ifndef SOFTDEVICE
	$(error "You need to set the SOFTDEVICE command-line parameter to a path (without spaces) to the softdevice hex-file")
endif
	$(MAKE_BUILD_FOLDER)
	$(OBJCOPY) -Iihex -Obinary $(SOFTDEVICE) $(SOFTDEVICE_OUTPUT:.hex=.bin)
	$(JLINK) $(OUTPUT_PATH)flash-softdevice.jlink

flash-softdevice.jlink:
	# Write to NVMC to enable write. Write mainpart, write UICR. Assumes device is erased.
	$(MAKE_BUILD_FOLDER)
	printf "w4 4001e504 1\nloadbin \"$(SOFTDEVICE_OUTPUT:.hex=.bin)\" 0\nr\ng\nexit\n" > $(OUTPUT_PATH)flash-softdevice.jlink

recover: recover.jlink erase-all.jlink pin-reset.jlink
	$(MAKE_BUILD_FOLDER)
	$(JLINK) $(OUTPUT_PATH)recover.jlink
	$(JLINK) $(OUTPUT_PATH)erase-all.jlink
	$(JLINK) $(OUTPUT_PATH)pin-reset.jlink

recover.jlink:
	$(MAKE_BUILD_FOLDER)
	printf "si 0\nt0\nsleep 1\ntck1\nsleep 1\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\ntck0\nsleep 100\nsi 1\nr\nexit\n" > $(OUTPUT_PATH)recover.jlink

pin-reset.jlink:
	$(MAKE_BUILD_FOLDER)
	printf "w4 40000544 1\nr\nexit\n" > $(OUTPUT_PATH)pin-reset.jlink

pin-reset: pin-reset.jlink
	$(MAKE_BUILD_FOLDER)
	$(JLINK) $(OUTPUT_PATH)pin-reset.jlink

reset: reset.jlink
	$(MAKE_BUILD_FOLDER)
	$(JLINK) $(OUTPUT_PATH)reset.jlink

reset.jlink:
	$(MAKE_BUILD_FOLDER)
	printf "r\ng\nexit\n" > $(OUTPUT_PATH)reset.jlink

erase-all: erase-all.jlink
	$(MAKE_BUILD_FOLDER)
	$(JLINK) $(OUTPUT_PATH)erase-all.jlink

erase-all.jlink:
	# Write to NVMC to enable erase, do erase all, wait for completion. reset
	$(MAKE_BUILD_FOLDER)
	printf "w4 4001e504 2\nw4 4001e50c 1\nsleep 100\nr\nexit\n" > $(OUTPUT_PATH)erase-all.jlink

from-scratch: all flash.jlink flash-softdevice
	$(MAKE_BUILD_FOLDER)
	$(JLINK) $(OUTPUT_PATH)flash.jlink

startdebug: debug-gdbinit
	$(TERMINAL) "$(JLINKGDBSERVER) -port $(GDB_PORT_NUMBER)"
	sleep 1
	$(TERMINAL) "$(GDB) $(ELF)"

startrtt:
	$(TERMINAL) "JLinkExe -device nrf51822 -if swd -speed 1000 -AutoConnect 1"
	sleep 1
	$(TERMINAL) "$(JLINKRTTCLIENT)"

#$(OPENTHREAD_DIR)/Makefile.in:
#	@cd $(OPENTHREAD_DIR); \
#	./bootstrap;
#
#$(THREAD_LIBS): $(OPENTHREAD_DIR)/Makefile.in
#	@$(MAKE_BUILD_FOLDER)
#	@mkdir -p $(OUTPUT_PATH)openthread
#	@mkdir -p $(OUTPUT_PATH)openthread/output
#	@mkdir -p $(OUTPUT_PATH)openthread/build
#	@cd $(OPENTHREAD_DIR); \
#	make -f $(OPENTHREAD_DIR)examples/Makefile-nrf52840;
#	@cp -r $(OPENTHREAD_DIR)output/* $(OUTPUT_PATH)openthread/output
#	@cp -r $(OPENTHREAD_DIR)build/* $(OUTPUT_PATH)openthread/build
#
#$(OUTPUT_PATH)openthread/output/nrf52840/lib/ \
#$(OUTPUT_PATH)openthread/output/ \
#$(OUTPUT_PATH)openthread/build/nrf52840/: $(THREAD_LIBS)
#
#clean-thread:
#	rm -rf $(OPENTHREAD_DIR)build/
#	rm -rf $(OPENTHREAD_DIR)output/


debug-gdbinit:
	printf "target remote localhost:$(GDB_PORT_NUMBER)\nload\nmon reset\nbreak main\n" > .gdbinit

.PHONY: flash flash-softdevice erase-all startdebug test-softdevice flash.jlink
